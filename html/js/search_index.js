var search_data = {"index":{"searchIndex":["metalarchives","artist","band","basemodel","collection","configuration","errors","apierror","argumenterror","error","invalidconfigurationerror","invalididerror","notimplementederror","parsererror","typeerror","lrucache","label","middleware","rewriteendpoint","nildate","parsers","parser","range","release","version","<=>()","<=>()","==()","[]()","[]=()","all()","all()","all()","assemble()","begin?()","boolean()","cache()","cached?()","call()","catalog_id()","clear()","config()","configure()","date()","day?()","delete()","each()","empty?()","end?()","enum()","find()","find()","find()","find!()","find!()","find!()","find_by()","find_by()","find_by()","find_by!()","find_by!()","find_by!()","find_by_name()","include?()","load!()","loaded?()","month?()","new()","new()","new()","new()","new()","new()","parse()","parse_country()","parse_genre()","parse_year_range()","property()","rewrite()","sanitize()","search()","search()","search()","search()","search_by()","search_by()","version_description()","year?()","readme"],"longSearchIndex":["metalarchives","metalarchives::artist","metalarchives::band","metalarchives::basemodel","metalarchives::collection","metalarchives::configuration","metalarchives::errors","metalarchives::errors::apierror","metalarchives::errors::argumenterror","metalarchives::errors::error","metalarchives::errors::invalidconfigurationerror","metalarchives::errors::invalididerror","metalarchives::errors::notimplementederror","metalarchives::errors::parsererror","metalarchives::errors::typeerror","metalarchives::lrucache","metalarchives::label","metalarchives::middleware","metalarchives::middleware::rewriteendpoint","metalarchives::nildate","metalarchives::parsers","metalarchives::parsers::parser","metalarchives::range","metalarchives::release","metalarchives::version","metalarchives::nildate#<=>()","metalarchives::range#<=>()","metalarchives::basemodel#==()","metalarchives::lrucache#[]()","metalarchives::lrucache#[]=()","metalarchives::artist::all()","metalarchives::band::all()","metalarchives::release::all()","metalarchives::basemodel#assemble()","metalarchives::range#begin?()","metalarchives::basemodel::boolean()","metalarchives::basemodel::cache()","metalarchives::basemodel#cached?()","metalarchives::middleware::rewriteendpoint#call()","metalarchives::release#catalog_id()","metalarchives::lrucache#clear()","metalarchives::config()","metalarchives::configure()","metalarchives::nildate#date()","metalarchives::nildate#day?()","metalarchives::lrucache#delete()","metalarchives::collection#each()","metalarchives::collection#empty?()","metalarchives::range#end?()","metalarchives::basemodel::enum()","metalarchives::artist::find()","metalarchives::band::find()","metalarchives::release::find()","metalarchives::artist::find!()","metalarchives::band::find!()","metalarchives::release::find!()","metalarchives::artist::find_by()","metalarchives::band::find_by()","metalarchives::release::find_by()","metalarchives::artist::find_by!()","metalarchives::band::find_by!()","metalarchives::release::find_by!()","metalarchives::label::find_by_name()","metalarchives::lrucache#include?()","metalarchives::basemodel#load!()","metalarchives::basemodel#loaded?()","metalarchives::nildate#month?()","metalarchives::basemodel::new()","metalarchives::collection::new()","metalarchives::configuration::new()","metalarchives::lrucache::new()","metalarchives::nildate::new()","metalarchives::range::new()","metalarchives::nildate::parse()","metalarchives::parsers::parser::parse_country()","metalarchives::parsers::parser::parse_genre()","metalarchives::parsers::parser::parse_year_range()","metalarchives::basemodel::property()","metalarchives::middleware::rewriteendpoint::rewrite()","metalarchives::parsers::parser::sanitize()","metalarchives::artist::search()","metalarchives::band::search()","metalarchives::label::search()","metalarchives::release::search()","metalarchives::band::search_by()","metalarchives::release::search_by()","metalarchives::release#version_description()","metalarchives::nildate#year?()",""],"info":[["MetalArchives","","MetalArchives.html","","<p>Metal Archives Ruby API\n"],["MetalArchives::Artist","","MetalArchives/Artist.html","","<p>Represents a single performer (but not a solo artist)\n"],["MetalArchives::Band","","MetalArchives/Band.html","","<p>Represents an band (person or group)\n"],["MetalArchives::BaseModel","","MetalArchives/BaseModel.html","","<p>Abstract model class\n"],["MetalArchives::Collection","","MetalArchives/Collection.html","","<p>Enumerable collection over a paginated resource\n"],["MetalArchives::Configuration","","MetalArchives/Configuration.html","","<p>Contains configuration options\n"],["MetalArchives::Errors","","MetalArchives/Errors.html","","<p>MetalArchives gem specific errors\n"],["MetalArchives::Errors::APIError","","MetalArchives/Errors/APIError.html","","<p>Error in backend response\n"],["MetalArchives::Errors::ArgumentError","","MetalArchives/Errors/ArgumentError.html","","<p>Error in method argument\n"],["MetalArchives::Errors::Error","","MetalArchives/Errors/Error.html","","<p>Generic error\n"],["MetalArchives::Errors::InvalidConfigurationError","","MetalArchives/Errors/InvalidConfigurationError.html","","<p>No or invalid configuration\n"],["MetalArchives::Errors::InvalidIDError","","MetalArchives/Errors/InvalidIDError.html","","<p>No or invalid ID\n"],["MetalArchives::Errors::NotImplementedError","","MetalArchives/Errors/NotImplementedError.html","","<p>Functionality not implemented (yet)\n"],["MetalArchives::Errors::ParserError","","MetalArchives/Errors/ParserError.html","","<p>Error parsing value\n"],["MetalArchives::Errors::TypeError","","MetalArchives/Errors/TypeError.html","","<p>Incorrect type\n"],["MetalArchives::LRUCache","","MetalArchives/LRUCache.html","","<p>Generic LRU memory cache\n"],["MetalArchives::Label","","MetalArchives/Label.html","","<p>Represents a record label\n"],["MetalArchives::Middleware","","MetalArchives/Middleware.html","",""],["MetalArchives::Middleware::RewriteEndpoint","","MetalArchives/Middleware/RewriteEndpoint.html","","<p>Dynamically rewrite endpoints\n"],["MetalArchives::NilDate","","MetalArchives/NilDate.html","","<p>Date with nullable year, month and day\n<p>WARNING: No validation on actual date is performed\n"],["MetalArchives::Parsers","","MetalArchives/Parsers.html","",""],["MetalArchives::Parsers::Parser","","MetalArchives/Parsers/Parser.html","","<p>Parser base class\n"],["MetalArchives::Range","","MetalArchives/Range.html","","<p>Range which can start and/or end with <code>nil</code>\n"],["MetalArchives::Release","","MetalArchives/Release.html","","<p>Represents a release\n"],["MetalArchives::Version","","MetalArchives/Version.html","","<p>MetalArchives API version\n"],["<=>","MetalArchives::NilDate","MetalArchives/NilDate.html#method-i-3C-3D-3E","(other)","<p>Comparison operator\n"],["<=>","MetalArchives::Range","MetalArchives/Range.html#method-i-3C-3D-3E","(other)","<p>Comparison operator\n"],["==","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-i-3D-3D","(obj)","<p>Returns true if two objects have the same type and id\n"],["[]","MetalArchives::LRUCache","MetalArchives/LRUCache.html#method-i-5B-5D","(key)",""],["[]=","MetalArchives::LRUCache","MetalArchives/LRUCache.html#method-i-5B-5D-3D","(key, value)",""],["all","MetalArchives::Artist","MetalArchives/Artist.html#method-c-all","()","<p>Get all artists\n<p>Returns Collection of Artist\n<p>Raises &mdash; \n<p>MetalArchives::Errors::APIError when receiving a status …\n"],["all","MetalArchives::Band","MetalArchives/Band.html#method-c-all","()","<p>Get all bands\n<p>Returns Collection of Band\n<p>Raises &mdash; \n<p>MetalArchives::Errors::APIError when receiving a status …\n"],["all","MetalArchives::Release","MetalArchives/Release.html#method-c-all","()","<p>Get all releases\n<p>Returns Collection of Release\n<p>Raises &mdash; \n<p>MetalArchives::Errors::APIError when receiving a …\n"],["assemble","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-i-assemble","()","<p>Fetch the data and assemble the model\n<p>Override this method\n<p>Raises &mdash; \n<p>MetalArchives::Errors::InvalidIDError …\n"],["begin?","MetalArchives::Range","MetalArchives/Range.html#method-i-begin-3F","()","<p>Whether start of range is present\n"],["boolean","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-c-boolean","(name, opts = {})","<p>Defines a model boolean property. This method is an alias for <code>enum name, :values =&gt; [true, false]</code> …\n"],["cache","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-c-cache","()","<p>Get class-level object cache\n"],["cached?","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-i-cached-3F","()","<p>Whether or not the object is currently cached\n"],["call","MetalArchives::Middleware::RewriteEndpoint","MetalArchives/Middleware/RewriteEndpoint.html#method-i-call","(env)",""],["catalog_id","MetalArchives::Release","MetalArchives/Release.html#method-i-catalog_id","","<p>:attr_reader_: catalog_id\n<p>Return <code>String</code>\n<p>Raises &mdash; \n<p>MetalArchives::Errors::InvalidIDError when no or invalid …\n"],["clear","MetalArchives::LRUCache","MetalArchives/LRUCache.html#method-i-clear","()",""],["config","MetalArchives","MetalArchives.html#method-c-config","()","<p>API configuration\n<p>Instance of MetalArchives::Configuration\n"],["configure","MetalArchives","MetalArchives.html#method-c-configure","()","<p>Configure API options.\n<p>A block must be specified, to which a MetalArchives::Configuration parameter will …\n"],["date","MetalArchives::NilDate","MetalArchives/NilDate.html#method-i-date","()","<p>Return a <code>Date</code> object\n"],["day?","MetalArchives::NilDate","MetalArchives/NilDate.html#method-i-day-3F","()",""],["delete","MetalArchives::LRUCache","MetalArchives/LRUCache.html#method-i-delete","(key)",""],["each","MetalArchives::Collection","MetalArchives/Collection.html#method-i-each","()","<p>Calls the given block once for each element, passing that element as a parameter. If no block is given, …\n"],["empty?","MetalArchives::Collection","MetalArchives/Collection.html#method-i-empty-3F","()",""],["end?","MetalArchives::Range","MetalArchives/Range.html#method-i-end-3F","()","<p>Whether end of range is present\n"],["enum","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-c-enum","(name, opts)","<p>Defines a model enum property.\n<p><code>name</code> &mdash; Name of the property\n<p><code>opts</code> &mdash; <p><code>values</code> &mdash; Required. An array of possible values …\n"],["find","MetalArchives::Artist","MetalArchives/Artist.html#method-c-find","(id)","<p>Find by ID\n<p>Returns Artist, even when ID is invalid (because the data is lazily fetched)\n<p><code>id</code> &mdash; <code>Integer</code>\n"],["find","MetalArchives::Band","MetalArchives/Band.html#method-c-find","(id)","<p>Find by ID\n<p>Returns Band, even when ID is invalid (because the data is lazily fetched)\n<p><code>id</code> &mdash; <code>Integer</code>\n"],["find","MetalArchives::Release","MetalArchives/Release.html#method-c-find","(id)","<p>Find by ID\n<p>Returns Release, even when ID is invalid (because the data is lazily fetched)\n<p><code>id</code> &mdash; <code>Integer</code>\n"],["find!","MetalArchives::Artist","MetalArchives/Artist.html#method-c-find-21","(id)","<p>Find by ID (no lazy loading)\n<p>Returns Artist\n<p>Raises &mdash; \n<p>MetalArchives::Errors::InvalidIDError when no or invalid …\n"],["find!","MetalArchives::Band","MetalArchives/Band.html#method-c-find-21","(id)","<p>Find by ID (no lazy loading)\n<p>Returns Band\n<p>Raises &mdash; \n<p>MetalArchives::Errors::InvalidIDError when no or invalid …\n"],["find!","MetalArchives::Release","MetalArchives/Release.html#method-c-find-21","(id)","<p>Find by ID (no lazy loading)\n<p>Returns Release\n<p>Raises &mdash; \n<p>MetalArchives::Errors::InvalidIDError when no or invalid …\n"],["find_by","MetalArchives::Artist","MetalArchives/Artist.html#method-c-find_by","(query)","<p>Find by attributes\n<p>Returns Artist or nil when no results\n<p>Raises &mdash; \n<p>MetalArchives::Errors::APIError when receiving …\n"],["find_by","MetalArchives::Band","MetalArchives/Band.html#method-c-find_by","(query)","<p>Find by attributes\n<p>Refer to MA’s FAQ for search tips.\n<p>Returns Band or nil when no results\n"],["find_by","MetalArchives::Release","MetalArchives/Release.html#method-c-find_by","(query)","<p>Find by attributes\n<p>Refer to MA’s FAQ for search tips.\n<p>Returns Release or nil when no results\n"],["find_by!","MetalArchives::Artist","MetalArchives/Artist.html#method-c-find_by-21","(query)","<p>Find by attributes (no lazy loading)\n<p>Returns Artist or nil when no results\n<p>Raises &mdash; \n<p>MetalArchives::Errors::InvalidIDError …\n"],["find_by!","MetalArchives::Band","MetalArchives/Band.html#method-c-find_by-21","(query)","<p>Find by attributes (no lazy loading)\n<p>Refer to MA’s FAQ for search tips.\n<p>Returns Band or nil when no results …\n"],["find_by!","MetalArchives::Release","MetalArchives/Release.html#method-c-find_by-21","(query)","<p>Find by attributes (no lazy loading)\n<p>Refer to MA’s FAQ for search tips.\n<p>Returns Release or nil when no …\n"],["find_by_name","MetalArchives::Label","MetalArchives/Label.html#method-c-find_by_name","(name, id)","<p>Find by name and id.\n<p>Returns Label\n"],["include?","MetalArchives::LRUCache","MetalArchives/LRUCache.html#method-i-include-3F","(key)",""],["load!","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-i-load-21","()","<p>Fetch, parse and load the data\n<p>Raises &mdash; \n<p>MetalArchives::Errors::InvalidIDError when no id\n<p>MetalArchives::Errors::APIError …\n"],["loaded?","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-i-loaded-3F","()","<p>Whether or not the object is currently loaded\n"],["month?","MetalArchives::NilDate","MetalArchives/NilDate.html#method-i-month-3F","()",""],["new","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-c-new","(hash = {})","<p>Generic shallow copy constructor\n"],["new","MetalArchives::Collection","MetalArchives/Collection.html#method-c-new","(proc)","<p>Construct a new Collection\n<p><code>proc</code> &mdash; <code>Proc</code> or <code>lambda</code>, called repeatedly when iterating. Should return an array …\n\n"],["new","MetalArchives::Configuration","MetalArchives/Configuration.html#method-c-new","()","<p>Default configuration values\n"],["new","MetalArchives::LRUCache","MetalArchives/LRUCache.html#method-c-new","(size = 100)",""],["new","MetalArchives::NilDate","MetalArchives/NilDate.html#method-c-new","(year = nil, month = nil, day = nil)",""],["new","MetalArchives::Range","MetalArchives/Range.html#method-c-new","(_begin = nil, _end = nil)","<p>Create a new range\n<p><code>_begin</code> &mdash; Start of range\nDefault: <code>nil</code>\n"],["parse","MetalArchives::NilDate","MetalArchives/NilDate.html#method-c-parse","(value)","<p>Parse YYYY[-MM]\n"],["parse_country","MetalArchives::Parsers::Parser","MetalArchives/Parsers/Parser.html#method-c-parse_country","(input)","<p>Parse a country\n<p>Returns <code>ISO3166::Country</code>\n"],["parse_genre","MetalArchives::Parsers::Parser","MetalArchives/Parsers/Parser.html#method-c-parse_genre","(input)","<p>Opinionated parsing of genres\n<p>Returns an <code>Array</code> of <code>String</code>\n<p>The following components are omitted:\n"],["parse_year_range","MetalArchives::Parsers::Parser","MetalArchives/Parsers/Parser.html#method-c-parse_year_range","(input)","<p>Parse year range\n"],["property","MetalArchives::BaseModel","MetalArchives/BaseModel.html#method-c-property","(name, opts = {})","<p>Defines a model property.\n<p><code>name</code> &mdash; Name of the property\n<p><code>opts</code> &mdash; <p><code>type</code> &mdash; Data type of property (a constant)\n"],["rewrite","MetalArchives::Middleware::RewriteEndpoint","MetalArchives/Middleware/RewriteEndpoint.html#method-c-rewrite","(uri)",""],["sanitize","MetalArchives::Parsers::Parser","MetalArchives/Parsers/Parser.html#method-c-sanitize","(input)","<p>Sanitize a string\n<p>Return <code>String</code>\n"],["search","MetalArchives::Artist","MetalArchives/Artist.html#method-c-search","(name)","<p>Search by name\n<p>Returns Collection of Artist\n<p>Raises &mdash; \n<p>MetalArchives::Errors::APIError when receiving a status …\n"],["search","MetalArchives::Band","MetalArchives/Band.html#method-c-search","(name)","<p>Search by name, resolves to Band.search_by <code>(:name =&gt; name)</code>\n<p>Refer to MA’s FAQ for search tips.\n<p>Returns …\n"],["search","MetalArchives::Label","MetalArchives/Label.html#method-c-search","(_name)","<p>Search by name.\n<p>Returns <code>Array</code> of Label\n"],["search","MetalArchives::Release","MetalArchives/Release.html#method-c-search","(title)","<p>Search by title, resolves to Release.search_by <code>(:title =&gt; title)</code>\n<p>Refer to MA’s FAQ for search tips. …\n"],["search_by","MetalArchives::Band","MetalArchives/Band.html#method-c-search_by","(query)","<p>Search by attributes\n<p>Refer to MA’s FAQ for search tips.\n<p>Returns Collection of Band\n"],["search_by","MetalArchives::Release","MetalArchives/Release.html#method-c-search_by","(query)","<p>Search by attributes\n<p>Refer to MA’s FAQ for search tips.\n<p>Returns Collection of Release\n"],["version_description","MetalArchives::Release","MetalArchives/Release.html#method-i-version_description","","<p>:attr_reader_: version_description\n<p>Return <code>String</code>\n<p>Raises &mdash; \n<p>MetalArchives::Errors::InvalidIDError when no or …\n"],["year?","MetalArchives::NilDate","MetalArchives/NilDate.html#method-i-year-3F","()",""],["README","","README_md.html","","<p>Metal Archives Ruby API\n<p>MetalArchives is a Ruby API that transparently wraps, caches and normalizes the …\n"]]}}